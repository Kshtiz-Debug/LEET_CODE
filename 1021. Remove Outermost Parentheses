A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

    For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.

A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.









Code:

class Solution:
    def removeOuterParentheses(self, s: str) -> str:
        self.s=s
        open=0
        close=0
        x=""
        y=[]
        for i in s:
            if i=="(":
                open+=1
                x=x+i
            else:
                close+=1
                x=x+i
            if open==close:
                y.append(x)
                open=0
                close=0
                x=""
        n=len(y)
        x=""
        for i in range(n):
            x=x+y[i][1:-1]
        return x
        
            

