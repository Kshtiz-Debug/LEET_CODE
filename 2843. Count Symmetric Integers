You are given two positive integers low and high.

An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.

Return the number of symmetric integers in the range [low, high].


code:


class Solution:
    def countSymmetricIntegers(self, low: int, high: int) -> int:
        flag = 0
        for x in range(low, high+1):
            l = len(str(x))
            z = []
            if l % 2 != 0:
                continue
            else:
                y = x  # no need to cast to int again
                for i in range(1, l + 1):
                    z.append(y % 10)
                    y = y // 10

            total, b = 0, 0
            for i in z:
                total = total + i
            for j in range(int(l / 2)):
                b = b + z[j]
            if total - b == b:
                flag = flag + 1
            else:
                continue
        return flag
