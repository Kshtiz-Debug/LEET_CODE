You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

code:


class Solution:
    def maxArea(self, height: List[int]) -> int:
        a=0
        b=len(height)-1
        area=0
        for i in range(len(height)+1):
            if a>=b:
                return area
            if area < (b-a) * (min(height[a],height[b])):
                area=(b-a)*min(height[a],height[b])
            if height[a]>height[b]:
                b=b-1
            else:
                a=a+1
        return area


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


So this is a Two Pointer Problem [TPP] and to solve em we take two pointers , one at the beginning nd one at end nd now keep updating em ..... This will ensure all the cases are 
considered .....
While loop should be used for TPP but here I've used for loop ..... doesn't matter but should be done ...
